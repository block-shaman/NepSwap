
var orders[] = new Array();
var waitList[] = new Array();

updateDisplay();

transaction made ();

getPrice( asset ) {
	return waitList[asset].lastPrice;
}

updateWaitList()
{
	for each account in waitList
		for each asset in waitList[account]
			if waitList[account][asset].balance > 0
			{
				if ( contract[asset].balance > waitList[account].quantity )
				{
				contract.sendTo( account, asset, quantity );
				waitList.remove( account, asset );
				}
			}

}

depositAsset ( name, quantity )
{
	if name != NEO
	{
		contract.balance.asset += quantity
		account.asset.initialValue = quantity
	} else {
		contract.balance.neo += transaction.value;

	}
}

wthdrawAsset ( name, quantity )
{
	if account.asset.initialValue > quantity
		if name != GAS or NEO {
			if contract.balance.asset < quantity
				contract.sendTo(asset, quantity)
			} else {
				print ( balance unavailable at the moment, wait or cancel? )
					var readInput;
						if readInput = wait
							updateWaitList(asset, quantity)
						else if readInput = cancel
							print ( withdrawal of @asset has been canceled by user )
							return;
			}

}

updateOrderBook( asset, price, quantity, duration, user )
{
	var buy[] = new Array();   // in descending order
	var sell[] = new Array();  // in ascending order
	for each asset in orders
	{
		for each item in orders[asset]
			var lastPrice = getPrice( asset );
			if orders[assets][item].price <= lastPrice
			{
				buy[item].push( item );

			} else if orders[assets][item].price > lastPrice
			{
				sell[item].push( item );
			}
	}

}

postOrder ( asset, price, quantity, duration )
{
	if account.asset.initialValue > quantity
			account.depositAsset( asset, quantity )
			if orders[account][asset].price != price
				contracts.orders.add ( transaction.user.last.asset, transaction.user.last,price,
																							transaction.user.last.quantity, transaction.user, duration )						//updateOrderBook( asset, price, quantity, duration, user )
	else
		print ( not enough balance )

}

updateAsset ( asset, user, quantity )
{
	if (contract.balance.asset.quantity > quantity) {
		contract.sendTo( asset, user, quantity );
	} else {
		if !(queue.contains(account, asset))
		{
			contract.updateWaitList(asset, quantity)
		}
	}
}

trade ( asset, price, user, quantity ... )
{
	if account.asset.initialValue > quantity
	{
		account.depositAsset( asset, quantity );
		contract.sendTo( asset, user, quantity );
	} else {
		print ( not enough @asset );
	}
}

globalUpdate ()
{
	for each account (has * asset)
		if account has balance 0f asset
			if asset != NEO or asset != GAS
					get account.initialValue
					if asset >< initialValue
						update account.initialValue
						send NEO * (price) to account from contract

}


main () {
	var genesisBlock = getCurrentBlock;
	var nextRound = genesisBlock + 1000;

	while genesisBlock < nextRound
		do something
	done

	genesisBlock = nextRound;
	nextRound += 1000;
}
